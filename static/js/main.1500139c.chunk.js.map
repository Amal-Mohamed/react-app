{"version":3,"sources":["components/Layout.jsx","components/AddTodo.jsx","components/TodoItem.jsx","components/Todos.jsx","pages/About.jsx","App.js","serviceWorker.js","index.js"],"names":["Layout","state","className","to","Component","AddTodo","title","setValue","e","setState","target","name","value","submitForm","preventDefault","props","addTodo","onSubmit","this","type","placeholder","onChange","TodoItem","checkIsComplete","todo","completed","concat","id","markComplete","bind","checked","onClick","deleteTodo","Todos","todos","map","key","indexOf","About","App","axios","delete","then","response","filter","newTodo","post","data","document","getElementById","scrollIntoView","behavior","block","inline","get","exact","path","render","Fragment","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6TAgCeA,G,kNA7BbC,MAAQ,G,uDAEN,OACE,yBAAKC,UAAU,sCACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,oBACb,0BAAMA,UAAU,2BAAhB,cAGF,6BACE,wBAAIA,UAAU,sBACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMC,GAAG,aAAaD,UAAU,YAAhC,SAIF,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMC,GAAG,mBAAmBD,UAAU,YAAtC,kB,GAlBKE,c,QCmCNC,E,4MAnCbJ,MAAQ,CACNK,MAAO,I,EAETC,SAAW,SAACC,GACV,EAAKC,SAAL,eAAiBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,EAE5CC,WAAa,SAACL,GACZA,EAAEM,iBACF,EAAKC,MAAMC,QAAQ,EAAKf,MAAMK,OAC9B,EAAKG,SAAS,CAAEH,MAAO,M,uDAIvB,OACE,yBAAKJ,UAAU,YACb,0BAAMA,UAAU,SAASe,SAAUC,KAAKL,YACtC,yBAAKX,UAAU,cACb,2BACEiB,KAAK,OACLjB,UAAU,+BACVkB,YAAY,WACZT,KAAK,QACLC,MAAOM,KAAKjB,MAAMK,MAClBe,SAAUH,KAAKX,YAGnB,4BAAQL,UAAU,sCAChB,uBAAGA,UAAU,wC,GA5BHE,aC8CPkB,E,4MA5CbrB,MAAQ,G,EAERsB,gBAAkB,WAEhB,OAAI,EAAKR,MAAMS,KAAKC,UADN,eAEGC,OAAO,0BAFV,eAIGA,OAAO,Y,uDAIhB,IAAD,EACeR,KAAKH,MAAMS,KAAzBG,EADD,EACCA,GAAIrB,EADL,EACKA,MACZ,OACE,yBAAKJ,UAAWgB,KAAKK,mBACnB,yBAAKrB,UAAU,aACb,yBAAKA,UAAU,cACb,2BAAOA,UAAU,oBACf,2BACEA,UAAU,mBACViB,KAAK,WACLE,SAAUH,KAAKH,MAAMa,aAAaC,KAAKX,KAAMS,GAC7CG,QAASZ,KAAKH,MAAMS,KAAKC,YAE3B,0BAAMvB,UAAU,oBACfI,IAGL,4BAAQJ,UAAU,oCAChB,uBACEA,UAAU,kCACV6B,QAASb,KAAKH,MAAMiB,WAAWH,KAAKX,KAAMS,Y,GAhCjCvB,aCwBR6B,E,4MArBbhC,MAAQ,G,uDACE,IAAD,OACP,OACE,6BACGiB,KAAKH,MAAMmB,MAAMC,KAAI,SAACX,GAAD,OACpB,kBAAC,EAAD,CACEY,IAAK,EAAKrB,MAAMmB,MAAMG,QAAQb,GAC9BA,KAAMA,EACNI,aAAc,EAAKb,MAAMa,aACzBI,WAAY,EAAKjB,MAAMiB,qB,GAVf5B,aCiBLkC,E,4MAnBbrC,MAAQ,G,uDAEN,OACE,6BACE,uBAAGC,UAAU,MAAb,aACA,gCAAYA,UAAU,0BACpB,uBAAGA,UAAU,QAAb,yFAIA,4BAAQA,UAAU,qBAAlB,qBACoB,0BAAMI,MAAM,gBAAZ,uB,GAZVF,aC4GLmC,E,4MAlGbtC,MAAQ,CACNiC,MAAO,I,EAeTN,aAAe,SAACD,GACd,IAAIO,EAAQ,EAAKjC,MAAMiC,MAAMC,KAAI,SAACX,GAIhC,OAHIA,EAAKG,IAAMA,IACbH,EAAKC,WAAaD,EAAKC,WAElBD,KAET,EAAKf,SAAS,CAAEyB,W,EAGlBF,WAAa,SAACL,GAWZa,IACGC,OADH,qDACwDd,IACrDe,MAAK,SAACC,GACL,IAAIT,EAAQ,YAAI,EAAKjC,MAAMiC,OAAOU,QAAO,SAACpB,GAAD,OAAUA,EAAKG,KAAOA,KAC/D,EAAKlB,SAAS,CAAEyB,MAAOA,Q,EAI7BlB,QAAU,SAACV,GAST,IAAIuC,EAAU,CAAEvC,QAAOmB,WAAW,GAElCe,IACGM,KAAK,6CAA8CD,GACnDH,MAAK,SAACC,GACL,EAAKlC,SAAS,CAAEyB,MAAM,GAAD,mBAAM,EAAKjC,MAAMiC,OAAjB,CAAwBS,EAASI,SAC5CC,SAASC,eAAe,OAC9BC,eAAe,CACjBC,SAAU,SACVC,MAAO,MACPC,OAAQ,gB,kEAxDK,IAAD,OAClBb,IACGc,IAAI,wDACJZ,MAAK,SAACC,GACL,EAAKlC,SAAS,CAAEyB,MAAOS,EAASI,Y,+BAyD5B,IAAD,OACP,OACE,kBAAC,IAAD,KACE,yBAAK7C,UAAU,MAAMyB,GAAG,OACtB,kBAAC,EAAD,MACA,yBAAKzB,UAAU,aACb,kBAAC,IAAD,CACEqD,OAAK,EACLC,KAAK,aACLC,OAAQ,SAAC1C,GAAD,OACN,kBAAC,IAAM2C,SAAP,KACE,kBAAC,EAAD,CAAS1C,QAAS,EAAKA,UACvB,kBAAC,EAAD,CACEkB,MAAO,EAAKjC,MAAMiC,MAClBN,aAAc,EAAKA,aACnBI,WAAY,EAAKA,iBAMzB,kBAAC,IAAD,CAAOwB,KAAK,mBAAmBG,UAAWrB,W,GA3FpClC,aCEEwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OACP,kBAAC,IAAMS,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASC,eAAe,SDyHpB,kBAAmBkB,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1500139c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nclass Layout extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-lg bg-primary\">\r\n        <div className=\"container\">\r\n          <div className=\"navbar-translate\">\r\n            <span className=\"navbar-brand text-white\">Todo List</span>\r\n          </div>\r\n\r\n          <div>\r\n            <ul className=\"navbar-nav ml-auto\">\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/react-app\" className=\"nav-link\">\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/react-app/about\" className=\"nav-link\">\r\n                  About\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Layout;\r\n","import React, { Component } from \"react\";\r\nclass AddTodo extends Component {\r\n  state = {\r\n    title: \"\",\r\n  };\r\n  setValue = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n  submitForm = (e) => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state.title);\r\n    this.setState({ title: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"add-todo\">\r\n        <form className=\"inline\" onSubmit={this.submitForm}>\r\n          <div className=\"form-group\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control form-control-lg\"\r\n              placeholder=\"Add Todo\"\r\n              name=\"title\"\r\n              value={this.state.title}\r\n              onChange={this.setValue}\r\n            />\r\n          </div>\r\n          <button className=\"btn btn-primary btn-icon btn-round\">\r\n            <i className=\"now-ui-icons ui-1_simple-add\"></i>\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nclass TodoItem extends Component {\r\n  state = {};\r\n\r\n  checkIsComplete = () => {\r\n    let calsses = \"alert alert-\";\r\n    if (this.props.todo.completed) {\r\n      return calsses.concat(\"secondary line-through\");\r\n    } else {\r\n      return calsses.concat(\"primary\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { id, title } = this.props.todo;\r\n    return (\r\n      <div className={this.checkIsComplete()}>\r\n        <div className=\"todo-card\">\r\n          <div className=\"form-check\">\r\n            <label className=\"form-check-label\">\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                onChange={this.props.markComplete.bind(this, id)}\r\n                checked={this.props.todo.completed}\r\n              />\r\n              <span className=\"form-check-sign\"></span>\r\n              {title}\r\n            </label>\r\n          </div>\r\n          <button className=\"btn btn-white btn-icon btn-round\">\r\n            <i\r\n              className=\"now-ui-icons ui-1_simple-remove\"\r\n              onClick={this.props.deleteTodo.bind(this, id)}\r\n            ></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Todos extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.todos.map((todo) => (\r\n          <TodoItem\r\n            key={this.props.todos.indexOf(todo)}\r\n            todo={todo}\r\n            markComplete={this.props.markComplete}\r\n            deleteTodo={this.props.deleteTodo}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Todos;\r\n","import React, { Component } from \"react\";\r\nclass About extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p className=\"h3\">About Us </p>\r\n        <blockquote className=\"blockquote text-center\">\r\n          <p className=\"mb-0\">\r\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer\r\n            posuere erat a ante.\r\n          </p>\r\n          <footer className=\"blockquote-footer\">\r\n            Someone famous in <cite title=\"Source Title\">Source Title</cite>\r\n          </footer>\r\n        </blockquote>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport Layout from \"./components/Layout\";\nimport AddTodo from \"./components/AddTodo\";\nimport Todos from \"./components/Todos\";\nimport About from \"./pages/About\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nclass App extends Component {\n  state = {\n    todos: [\n      // { id: uuidv4(), title: \"Run your life like a pro\", completed: false },\n      // { id: uuidv4(), title: \"Your to-do list. Done.\", completed: false },\n      // { id: uuidv4(), title: \"Work better together\", completed: false },\n    ],\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/todos?_limit=10\")\n      .then((response) => {\n        this.setState({ todos: response.data });\n      });\n  }\n\n  markComplete = (id) => {\n    let todos = this.state.todos.map((todo) => {\n      if (todo.id == id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n    this.setState({ todos });\n  };\n\n  deleteTodo = (id) => {\n    // let todos = [...this.state.todos];\n    // let index;\n    // todos.map((todo) => {\n    //   if (todo.id == id) {\n    //     index = todos.indexOf(todo);\n    //   }\n    // });\n    // todos.splice(index, 1);\n    // this.setState({ todos });\n\n    axios\n      .delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n      .then((response) => {\n        let todos = [...this.state.todos].filter((todo) => todo.id !== id);\n        this.setState({ todos: todos });\n      });\n  };\n\n  addTodo = (title) => {\n    // let todos = [...this.state.todos];\n    // todos.push({\n    //   id: uuidv4(),\n    // title,\n    // completed: false,\n    // });\n    // this.setState({ todos });\n\n    let newTodo = { title, completed: false };\n\n    axios\n      .post(\"https://jsonplaceholder.typicode.com/todos\", newTodo)\n      .then((response) => {\n        this.setState({ todos: [...this.state.todos, response.data] });\n        let ele = document.getElementById(\"app\");\n        ele.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"end\",\n          inline: \"nearest\",\n        });\n      });\n  };\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\" id=\"app\">\n          <Layout />\n          <div className=\"container\">\n            <Route\n              exact\n              path=\"/react-app\"\n              render={(props) => (\n                <React.Fragment>\n                  <AddTodo addTodo={this.addTodo} />\n                  <Todos\n                    todos={this.state.todos}\n                    markComplete={this.markComplete}\n                    deleteTodo={this.deleteTodo}\n                  />\n                </React.Fragment>\n              )}\n            />\n\n            <Route path=\"/react-app/about\" component={About} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}